# Project: CI/CD Pipeline with Dynamic Jenkins Agents & Automated Testing

This project represents the final evolution of a multi-stage CI/CD pipeline, focusing on cost-optimization, efficiency, and quality assurance. By integrating the Jenkins Docker plugin, the system moves from a static infrastructure to a dynamic, on-demand model where temporary, containerized Jenkins agents are provisioned only when needed. This pipeline also introduces an automated testing stage, ensuring only validated builds are deployed to the final Kubernetes environment.

[Back to Home](../index.md)

---

### 1. The Goal

The primary goal was to enhance the existing CI/CD pipeline with two critical features: on-demand agent provisioning to reduce cloud costs and resource wastage, and an automated testing quality gate to improve deployment reliability. The objective was to create a highly efficient, event-driven workflow that intelligently uses both dynamic and static agents for different stages of the pipeline.

---

### 2. My Role & Contributions

As the architect and engineer of this advanced pipeline, I was responsible for designing the dynamic infrastructure, implementing the testing stage, and ensuring seamless integration between all components.

* **Dynamic Agent Provisioning:** I configured the Jenkins Docker plugin to connect to a remote Docker host, enabling the automatic creation and destruction of ephemeral build agents. This significantly optimized resource utilization.
* **Custom Agent Image Creation:** I wrote a `Dockerfile` to build a custom Jenkins agent image equipped with the necessary tools (Docker CLI, kubectl), ensuring a standardized and reproducible build environment.
* **Automated Testing & Quality Assurance:** I integrated a critical "smoke test" stage into the pipeline. This quality gate automatically validates the application container after the build, preventing faulty code from reaching production.
* **Complex Configuration:** I successfully resolved the "Docker-in-Docker" challenge by mounting the host's Docker socket into the dynamic agent, allowing the agent to build Docker images. I also managed all secrets (Docker Hub, kubeconfig) securely within Jenkins for remote connections.
* **End-to-End Pipeline Orchestration:** I structured the entire workflow using three chained Jenkins jobs (Build, Test, Deploy), configuring them to run on the appropriate agent type (dynamic for build/test, static for deployment) and trigger automatically from a GitHub webhook.

---

### 3. Technologies Used

* **CI/CD Orchestration:** Jenkins
* **Containerization & Dynamic Agents:** Docker, Docker Hub
* **Container Orchestration:** Kubernetes (Minikube)
* **Cloud Provider:** Amazon Web Services (AWS)
* **Source Control:** Git & GitHub

---

### 4. Project Links

* **[View Code & Architecture on GitHub](https://github.com/githubabhay2003/your-repo-name)**

---
